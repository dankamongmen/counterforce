#!/bin/sh

set -e

MQTT=$(which mosquitto_pub)
TOPIC=sensors/amoled

[ -n "$MQTTUSER" ] || { echo "export MQTT username as MQTTUSER" >&2 ; exit 1 ; }
[ -n "$MQTTPASS" ] || { echo "export MQTT password as MQTTPASS" >&2 ; exit 1 ; }
[ -n "$MQTTHOST" ] || { echo "export MQTT server as MQTTHOST" >&2 ; exit 1 ; }

# swallow errors so we don't exit. no arguments.
mqttflush() {
  "$MQTT" --id amoled -h "$MQTTHOST" -t "$TOPIC" -m "{$POST}" -u "$MQTTUSER" -P "$MQTTPASS" || \
    { echo "error publishing to mqtt: $POST" >&2 ; }
}

# arguments: topic (key), message.
mqtt() {
  if [ -z "$2" ] ; then
    echo "not adding invalid value for $1" >&2
  else
    if [ -z "$POST" ] ; then
      POST="\"$1\":$2"
    else
      POST="$POST, \"$1\":$2"
    fi
  fi
}

while true ; do
  POST=""
  # rpi temp sensor
  TCTL=$(sensors -j | jq '."cpu_thermal-virtual-0".temp1.temp1_input') 2> /dev/null
  mqtt rpi4temp $TCTL

  # rpi voltage
  PIVOLTS=$(vcgencmd measure_volts | cut -d= -f2 | cut -dV -f1)
  mqtt rpi4volts $PIVOLTS

  UPSEC=$(cut -d\  -f1 < /proc/uptime)
  mqtt uptimesec $UPSEC

  # load average
  LOAD=$(cut -d\  -f1 < /proc/loadavg)
  mqtt loadavg $LOAD

  DBM=$(iw dev wlan0 link | grep signal | cut -d: -f2- | cut -dd -f1 | tr -d [:space:])
  if [ -n "$DBM" ] ; then
    mqtt signaldbm $DBM
  fi

  SYSTEMDFAILED=$(systemctl --failed --output=json | jq length -)
  mqtt systemdfails $SYSTEMDFAILED

  mqttflush
  sleep 15
done
