#!/bin/sh

set -e

MQTT=$(which mosquitto_pub)
TOPIC=sensors/qgp

[ -n "$MQTTUSER" ] || { echo "export MQTT username as MQTTUSER" >&2 ; exit 1 ; }
[ -n "$MQTTPASS" ] || { echo "export MQTT password as MQTTPASS" >&2 ; exit 1 ; }
[ -n "$MQTTHOST" ] || { echo "export MQTT server as MQTTHOST" >&2 ; exit 1 ; }

# swallow errors so we don't exit. no arguments.
mqttflush() {
  "$MQTT" --id qgp -h "$MQTTHOST" -t "$TOPIC" -m "{$POST}" -u "$MQTTUSER" -P "$MQTTPASS" || \
    { echo "error publishing to mqtt: $POST" >&2 ; }
}

# arguments: topic (key), message.
mqtt() {
  if [ -z "$POST" ] ; then
    POST="\"$1\":$2"
  else
    POST="$POST, \"$1\":$2"
  fi
}

# prints bytes RX from a /proc/net/dev line provided as $*
procnetdevrx() {
  echo $* | sed -e 's/ *//' | cut -d\  -f2
}

# prints bytes TX from a /proc/net/dev line provided as $*
procnetdevtx() {
  echo $* | sed -e 's/ *//' | cut -d\  -f10
}

stripnum() {
  echo "$@" | tr -d -c .[:digit:]-
}

if [ -z "$AMDGPU" ] ; then
  AMDGPU=$(sensors | grep ^amdgpu-pci) || echo "Couldn't find AMD GPU" >&2
fi

while true ; do
  POST=""


  if [ -z "$HFLOW" ] ; then
    HFLOW=$(sensors | grep ^highflownext-hid) || echo "Couldn't find Aquacomputer highflow NEXT" >&2
  fi
  COOLTEMP=$(sensors -j | jq .\"$HFLOW\".\"Coolant\ temp\".temp1_input) 2> /dev/null
  if [ "$COOLTEMP" != "null" ] ; then
    mqtt aquacool $COOLTEMP
  fi
  FLOW=$(sensors -j | jq .\"$HFLOW\".\"Flow\ \[dL/h\]\".fan1_input) 2> /dev/null
  if [ "$FLOW" != "null" ] ; then
    # convert deciliters-per-hour to liters-per-minute
    FLOW=$(jq -n $FLOW/60/10)
    mqtt aquaflow $FLOW
  fi
  V5USB=$(sensors -j | jq .\"$HFLOW\".\"+5V\ USB\ voltage\".in1_input) 2> /dev/null
  if [ "$V5USB" != "null" ] ; then
    mqtt v5usb $V5USB
  fi

  UPSEC=$(cut -d\  -f1 < /proc/uptime)
  mqtt uptimesec $UPSEC

  # load average
  LOAD=$(cut -d\  -f1 < /proc/loadavg)
  mqtt loadavg $LOAD

  TCTL=$(sensors -j | jq '."k10temp-pci-00c3".Tctl[]') 2> /dev/null
  mqtt tctl $TCTL

  GPU=$(sensors -j | jq .\"$AMDGPU\".edge[]) 2> /dev/null
  mqtt gputemp $GPU

  XTOP0RPM=$(sensors -j | jq '."it8689-isa-0a40".fan1.fan1_input') 2> /dev/null
  mqtt cpu0rpm $XTOP0RPM

  MORARPM=$(sensors -j | jq '."it8689-isa-0a40".fan3.fan3_input') 2> /dev/null
  mqtt morarpm $MORARPM

  XTOP1RPM=$(sensors -j | jq '."it8689-isa-0a40".fan5.fan5_input') 2> /dev/null
  mqtt cpu1rpm $XTOP1RPM

  # network
  for i in r8169 mlx5 ; do
    STATS=$(cat /proc/net/dev | grep $i:) # FIXME continue on error
    if [ -n "$STATS" ] ; then
      RX=$(procnetdevrx $STATS)
      TX=$(procnetdevtx $STATS)
      mqtt nicrxb$i $RX
      mqtt nictxb$i $TX
    fi
  done

  MLX5TEMP=$(sensors -j | jq '.[]|select(.Adapter|test("Virtual device"))|.temp1.temp1_input') 2> /dev/null
  mqtt nictempmlx5 $MLX5TEMP

  # SATA disks
  DISKTEMPS=$(sensors -j | jq '.[]|select(.Adapter|test("SCSI adapter"))|.temp1.temp1_input') 2> /dev/null
  DIDX=0
  for i in $DISKTEMPS ; do
    mqtt sata$DIDX $i
    DIDX=$((DIDX + 1))
  done

  # NVMe disks
  for i in /dev/nvme? ; do
    # text looks like: "temperature				: 50Â°C (323 Kelvin)"
    # in some error cases, a negative value is returned; elide these
    TEMP=$(nvme smart-log $i | grep ^temperature | cut -d\( -f1 | tr -d -c .[:digit:]-)
    S=$(echo $i | cut -d/ -f3)
    if [ "$TEMP" -ge 0 ] ; then
      mqtt "$S"temp $TEMP
    fi
  done

  # fs availability
  for i in / /home ; do
    AVAIL=$(df $i --output=avail | sed -e 1d)
    AVAIL=$(stripnum $AVAIL)
    TOTAL=$(df $i --output=size | sed -e 1d)
    TOTAL=$(stripnum $TOTAL)
    PCENT=`jq -n \(1-$AVAIL/$TOTAL\)*100`
    NAME="fs`basename $i | sed -e 's/\//root/'`"
    mqtt "$NAME" $PCENT
  done

  mqttflush
  sleep 15
done
