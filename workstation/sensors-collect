#!/bin/sh

set -e

MQTT=$(which mosquitto_pub)
LCTL=$(which liquidctl)
TOPIC=sensors

[ -n "$MQTTUSER" ] || { echo "export MQTT username as MQTTUSER" >&2 ; exit 1 ; }
[ -n "$MQTTPASS" ] || { echo "export MQTT password as MQTTPASS" >&2 ; exit 1 ; }

HFLOW=$(sensors | grep ^highflownext-hid)

# FIXME terrible, truly terrible
while true ; do
  # k10 temp sensors
  TCTL=$(sensors -j | jq '."k10temp-pci-00c3".Tctl[]') 2> /dev/null
  "$MQTT" -t "$TOPIC/tctl" -m "{\"tctl\":$TCTL}" -u "$MQTTUSER" -P "$MQTTPASS"
  Tccd1=$(sensors -j | jq '."k10temp-pci-00c3".Tccd1[]') 2> /dev/null
  "$MQTT" -t "$TOPIC/tccd1" -m "{\"tccd1\":$Tccd1}" -u "$MQTTUSER" -P "$MQTTPASS"
  Tccd2=$(sensors -j | jq '."k10temp-pci-00c3".Tccd3[]') 2> /dev/null
  "$MQTT" -t "$TOPIC/tccd2" -m "{\"tccd2\":$Tccd2}" -u "$MQTTUSER" -P "$MQTTPASS"
  Tccd3=$(sensors -j | jq '."k10temp-pci-00c3".Tccd5[]') 2> /dev/null
  "$MQTT" -t "$TOPIC/tccd3" -m "{\"tccd3\":$Tccd3}" -u "$MQTTUSER" -P "$MQTTPASS"
  Tccd4=$(sensors -j | jq '."k10temp-pci-00c3".Tccd7[]') 2> /dev/null
  "$MQTT" -t "$TOPIC/tccd4" -m "{\"tccd4\":$Tccd4}" -u "$MQTTUSER" -P "$MQTTPASS"

  # it87 rpm sensors
  CPU0RPM=$(sensors -j | jq '."it8688-isa-0a40".cpu0.fan1_input') 2> /dev/null
  "$MQTT" -t "$TOPIC/cpu0rpm" -m "{\"cpu0rpm\":$CPU0RPM}" -u "$MQTTUSER" -P "$MQTTPASS"
  CPU1RPM=$(sensors -j | jq '."it8688-isa-0a40".cpu1.fan5_input') 2> /dev/null
  "$MQTT" -t "$TOPIC/cpu1rpm" -m "{\"cpu1rpm\":$CPU1RPM}" -u "$MQTTUSER" -P "$MQTTPASS"
  HDRPM=$(sensors -j | jq '."it8688-isa-0a40"."sys2 (mobo hds)".fan3_input') 2> /dev/null
  "$MQTT" -t "$TOPIC/mobohdrpm" -m "{\"mobohdrpm\":$HDRPM}" -u "$MQTTUSER" -P "$MQTTPASS"
  AMBPSU=$(sensors -j | jq '."it8688-isa-0a40"."ec1 (loop)".temp6_input') 2> /dev/null
  "$MQTT" -t "$TOPIC/psuchamber" -m "{\"psuchamber\":$AMBPSU}" -u "$MQTTUSER" -P "$MQTTPASS"

  # secondary it87 sensors
  HDPSURPM=$(sensors -j | jq '."it8688-isa-0a60"."pump5a (psu hds)".fan1_input') 2> /dev/null
  "$MQTT" -t "$TOPIC/psuhdrpm" -m "{\"psuhdrpm\":$HDPSURPM}" -u "$MQTTUSER" -P "$MQTTPASS"
  TOPRPM=$(sensors -j | jq '."it8688-isa-0a60"."sys4 (mobo top)".fan3_input') 2> /dev/null
  "$MQTT" -t "$TOPIC/toprpm" -m "{\"toprpm\":$TOPRPM}" -u "$MQTTUSER" -P "$MQTTPASS"
  AMBMOBO=$(sensors -j | jq '."it8688-isa-0a60"."ec2 (ambient)".temp2_input') 2> /dev/null
  "$MQTT" -t "$TOPIC/mobochamber" -m "{\"mobochamber\":$AMBMOBO}" -u "$MQTTUSER" -P "$MQTTPASS"

  # corsair commander core xt
  LVALS=$("$LCTL" status --json -m 'Corsair Commander Core XT' | jq '.[].status[]|.value')
  for i in `seq 0 5` ; do
    VAL=$(echo $LVALS | cut -d\  -f1)
    LVALS=$(echo $LVALS | cut -d\  -f2-)
    "$MQTT" -t "$TOPIC/corsair$i" -m "{\"corsair$i\":$VAL}" -u "$MQTTUSER" -P "$MQTTPASS"
  done
  # temp 1 is broken
  LVALS=$(echo $LVALS | cut -d\  -f2-)
  # use temp2
  VAL=$(echo $LVALS | cut -d\  -f1)
  "$MQTT" -t "$TOPIC/corsairtemp1" -m "{\"corsairtemp1\":$VAL}" -u "$MQTTUSER" -P "$MQTTPASS"

  # nvidia
  GPU=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
  "$MQTT" -t "$TOPIC/gputemp" -m "{\"gputemp\":$GPU}" -u "$MQTTUSER" -P "$MQTTPASS"
  GPUMEM=$(nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits)
  GPUMEM=$((GPUMEM*1024*1024)) # it's in MiB
  "$MQTT" -t "$TOPIC/gpuactmem" -m "{\"gpuactmem\":$GPUMEM}" -u "$MQTTUSER" -P "$MQTTPASS"
  GPUW=$(nvidia-smi --query-gpu=power.draw --format=csv,noheader,nounits)
  "$MQTT" -t "$TOPIC/gpuwatts" -m "{\"gpuwatts\":$GPUW}" -u "$MQTTUSER" -P "$MQTTPASS"

  # aquacomputer
  COOLTEMP=$(sensors -j | jq .\"$HFLOW\".\"Coolant\ temp\".temp1_input) 2> /dev/null
  if [ "$COOLTEMP" != "null" ] ; then
    "$MQTT" -t "$TOPIC/aquacool" -m "{\"aquacool\":$COOLTEMP}" -u "$MQTTUSER" -P "$MQTTPASS"
  fi
  EXTTEMP=$(sensors -j | jq .\"$HFLOW\".\"External\ sensor\".temp2_input) 2> /dev/null
  if [ "$EXTTEMP" != "null" ] ; then
    "$MQTT" -t "$TOPIC/aquaext" -m "{\"aquaext\":$EXTTEMP}" -u "$MQTTUSER" -P "$MQTTPASS"
  fi
  FLOW=$(sensors -j | jq .\"$HFLOW\".\"Flow\ \[dL/h\]\".fan1_input) 2> /dev/null
  if [ "$FLOW" != "null" ] ; then
    # convert deciliters-per-hour to liters-per-minute
    FLOW=$(jq -n $FLOW/60/10)
    "$MQTT" -t "$TOPIC/aquaflow" -m "{\"aquaflow\":$FLOW}" -u "$MQTTUSER" -P "$MQTTPASS"
  fi

  # load average
  LOAD=$(cut -d\  -f1 < /proc/loadavg)
  "$MQTT" -t "$TOPIC/loadavg" -m "{\"loadavg\":$LOAD}" -u "$MQTTUSER" -P "$MQTTPASS"

  # memory
  ACTMEM=$(cat /proc/meminfo | grep ^Active: | cut -d: -f2 | tr -d [:space:] | cut -dk -f1)
  ACTMEM=$((ACTMEM * 1024))
  "$MQTT" -t "$TOPIC/actmem" -m "{\"actmem\":$ACTMEM}" -u "$MQTTUSER" -P "$MQTTPASS"
  CACHEMEM=$(cat /proc/meminfo | grep ^Cached: | cut -d: -f2 | tr -d [:space:] | cut -dk -f1)
  CACHEMEM=$((CACHEMEM * 1024))
  "$MQTT" -t "$TOPIC/cachemem" -m "{\"cachemem\":$CACHEMEM}" -u "$MQTTUSER" -P "$MQTTPASS"

  # these require root, ugh--set powercap-info suid root, or something similar =\.
  UPSW=$(pwrstat -status | grep Load | cut -d\  -f2)
  "$MQTT" -t "$TOPIC/upswatts" -m "{\"upswatts\":$UPSW}" -u "$MQTTUSER" -P "$MQTTPASS"
  #CORE1W=$(powercap-info -z 0:0 intel-rapl | grep energy_uj | cut -d: -f2 | tr -d [:space:])
  #sleep 1
  #CORE2W=$(powercap-info -z 0:0 intel-rapl | grep energy_uj | cut -d: -f2 | tr -d [:space:])
  #COREW=`jq -n \($CORE2W-$CORE1W\)/100000`
  #"$MQTT" -t "$TOPIC/corewatts" -m "{\"corewatts\":$COREW}" -u "$MQTTUSER" -P "$MQTTPASS"
  PKG1W=$(powercap-info -z 0: intel-rapl | grep energy_uj | cut -d: -f2 | tr -d [:space:])
  sleep 1
  PKG2W=$(powercap-info -z 0: intel-rapl | grep energy_uj | cut -d: -f2 | tr -d [:space:])
  if [ $PKG2W -ge $PKG1W ] ; then
    PKGW=`jq -n \($PKG2W-$PKG1W\)/1000000`
    "$MQTT" -t "$TOPIC/pkgwatts" -m "{\"pkgwatts\":$PKGW}" -u "$MQTTUSER" -P "$MQTTPASS"
  else
    echo "powercap went backwards $PKG1W $PKG2W" >&2
  fi

  sleep 10
done
