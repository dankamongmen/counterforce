#!/bin/sh

set -e

MQTT=$(which mosquitto_pub)
LCTL=$(which liquidctl)
TOPIC=sensors/schwarzgerät

[ -n "$MQTTUSER" ] || { echo "export MQTT username as MQTTUSER" >&2 ; exit 1 ; }
[ -n "$MQTTPASS" ] || { echo "export MQTT password as MQTTPASS" >&2 ; exit 1 ; }

# swallow errors so we don't exit. optional arguments might include -r.
mqttflush() {
  "$MQTT" $@ --id schwarzgerät -t "$TOPIC" -m "{$POST}" -u "$MQTTUSER" -P "$MQTTPASS" || \
    { echo "error publishing to mqtt: $POST" >&2 ; }
}

# arguments: topic (key), message.
mqtt() {
  if [ -z "$POST" ] ; then
    POST="\"$1\":$2"
  else
    POST="$POST, \"$1\":$2"
  fi
}

isnumber() {
  case "$1" in
    ''|*[!0-9]*) return 1 ; ;;
    *) return 0
  esac
}

# prints bytes RX from a /proc/net/dev line provided as $*
procnetdevrx() {
  echo $* | sed -e 's/ *//' | cut -d\  -f2
}

# prints bytes TX from a /proc/net/dev line provided as $*
procnetdevtx() {
  echo $* | sed -e 's/ *//' | cut -d\  -f10
}

ITER=0

mqtt kernel \"`uname -r`\"
mqttflush -r

while true ; do
  ITER=$((ITER + 1))

  POST=""
  if [ -z "$HFLOW" ] ; then
    HFLOW=$(sensors | grep ^highflownext-hid) || echo "Couldn't find Aquacomputer highflow NEXT" >&2
  fi

  # k10 temp sensors. TCtl is offset for a "consistent fan policy across
  # all AMD Ryzen processors", i.e. as input to a fan management scheme.
  # we want the unoffset values, though we also report TCtl for
  # completion. submit the average as well.
  TCTL=$(sensors -j | jq '."k10temp-pci-00c3".Tctl[]') 2> /dev/null
  mqtt tctl $TCTL
  Tccd1=$(sensors -j | jq '."k10temp-pci-00c3".Tccd1[]') 2> /dev/null
  mqtt tccd1 $Tccd1
  Tccd2=$(sensors -j | jq '."k10temp-pci-00c3".Tccd3[]') 2> /dev/null
  mqtt tccd2 $Tccd2
  Tccd3=$(sensors -j | jq '."k10temp-pci-00c3".Tccd5[]') 2> /dev/null
  mqtt tccd3 $Tccd3
  Tccd4=$(sensors -j | jq '."k10temp-pci-00c3".Tccd7[]') 2> /dev/null
  mqtt tccd4 $Tccd4
  TAVG=$(jq -n \($Tccd1+$Tccd2+$Tccd3+$Tccd4\)/4)
  mqtt tavg $TAVG

  # it87 primary sensors
  # PWM: hwmon17/pwm1
  CPU0RPM=$(sensors -j | jq '."it8688-isa-0a40".cpu0.fan1_input') 2> /dev/null
  mqtt cpu0rpm $CPU0RPM
  # tach on XTOP #1 B is not currently functional!
  # PWM: hwmon17/pwm5
  CPU1RPM=$(sensors -j | jq '."it8688-isa-0a40".cpu1.fan5_input') 2> /dev/null
  mqtt cpu1rpm $CPU1RPM
  # PWM: hwmon17/pwm3
  HDRPM=$(sensors -j | jq '."it8688-isa-0a40"."sys2 (mobo hds)".fan3_input') 2> /dev/null
  mqtt mobohdrpm $HDRPM
  # PWM: hwmon17/pwm2
  VRMMOSRPM=$(sensors -j | jq '."it8688-isa-0a40"."mos".fan2_input') 2> /dev/null
  mqtt vrmmosrpm $VRMMOSRPM
  VRMMOS=$(sensors -j | jq '."it8688-isa-0a40"."vrmmos".temp2_input') 2> /dev/null
  mqtt vrmmos $VRMMOS
  # PWM: hwmon17/pwm4
  PCHRPM=$(sensors -j | jq '."it8688-isa-0a40"."pch".fan4_input') 2> /dev/null
  mqtt pchrpm $PCHRPM
  PCH=$(sensors -j | jq '."it8688-isa-0a40"."pch".temp3_input') 2> /dev/null
  mqtt pch $PCH
  AMBPSU=$(sensors -j | jq '."it8688-isa-0a40"."ec1 (loop)".temp6_input') 2> /dev/null
  mqtt psuchamber $AMBPSU
  VCORE=$(sensors -j | jq '."it8688-isa-0a40"."CPU Vcore".in0_input') 2> /dev/null
  mqtt vcore $VCORE
  V33=$(sensors -j | jq '."it8688-isa-0a40"."+3.3V".in1_input') 2> /dev/null
  mqtt v33 $V33
  V12=$(sensors -j | jq '."it8688-isa-0a40"."+12V".in2_input') 2> /dev/null
  mqtt v12 $V12
  V5=$(sensors -j | jq '."it8688-isa-0a40"."+5V".in3_input') 2> /dev/null
  mqtt v5 $V5
  VDRAM=$(sensors -j | jq '."it8688-isa-0a40"."DRAM".in6_input') 2> /dev/null
  mqtt vdram $VDRAM

  # secondary it87 sensors
  HDPSURPM=$(sensors -j | jq '."it8792-isa-0a60"."pump5a (psu hds)".fan1_input') 2> /dev/null
  mqtt psuhdrpm $HDPSURPM
  TOPRPM=$(sensors -j | jq '."it8792-isa-0a60"."sys4 (mobo top)".fan3_input') 2> /dev/null
  mqtt toprpm $TOPRPM
  AMBMOBO=$(sensors -j | jq '."it8792-isa-0a60"."ec2 (ambient)".temp2_input') 2> /dev/null
  mqtt mobochamber $AMBMOBO

  # corsair commander core xt
  LVALS=$("$LCTL" status --json -m 'Corsair Commander Core XT' | jq '.[].status[]|.value' || echo "")
  for i in `seq 0 5` ; do
    VAL=$(echo $LVALS | cut -d\  -f1)
    LVALS=$(echo $LVALS | cut -d\  -f2-)
    mqtt corsair$i $VAL
  done
  # temp 1 is broken
  LVALS=$(echo $LVALS | cut -d\  -f2-)
  # use temp2
  VAL=$(echo $LVALS | cut -d\  -f1)
  mqtt corsairtemp1 $VAL

  # nvidia
  GPU=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
  mqtt gputemp $GPU
  GPUMEM=$(nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits)
  GPUMEM=$((GPUMEM*1024*1024)) # it's in MiB
  mqtt gpuactmem $GPUMEM
  GPUW=$(nvidia-smi --query-gpu=power.draw --format=csv,noheader,nounits)
  mqtt gpuwatts $GPUW
  GPCENT=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits)
  mqtt gpupcent $GPCENT

  # aquacomputer
  COOLTEMP=$(sensors -j | jq .\"$HFLOW\".\"Coolant\ temp\".temp1_input) 2> /dev/null
  if [ "$COOLTEMP" != "null" ] ; then
    mqtt aquacool $COOLTEMP
  fi
  EXTTEMP=$(sensors -j | jq .\"$HFLOW\".\"External\ sensor\".temp2_input) 2> /dev/null
  if [ "$EXTTEMP" != "null" ] ; then
    mqtt aquaext $EXTTEMP
  fi
  FLOW=$(sensors -j | jq .\"$HFLOW\".\"Flow\ \[dL/h\]\".fan1_input) 2> /dev/null
  if [ "$FLOW" != "null" ] ; then
    # convert deciliters-per-hour to liters-per-minute
    FLOW=$(jq -n $FLOW/60/10)
    mqtt aquaflow $FLOW
  fi
  V5USB=$(sensors -j | jq .\"$HFLOW\".\"+5V\ USB\ voltage\".in1_input) 2> /dev/null
  if [ "$V5USB" != "null" ] ; then
    mqtt v5usb $V5USB
  fi

  # load average
  LOAD=$(cut -d\  -f1 < /proc/loadavg)
  mqtt loadavg $LOAD

  # memory
  ACTMEM=$(cat /proc/meminfo | grep ^Active: | cut -d: -f2 | tr -d [:space:] | cut -dk -f1)
  ACTMEM=$((ACTMEM * 1024))
  mqtt actmem $ACTMEM
  CACHEMEM=$(cat /proc/meminfo | grep ^Cached: | cut -d: -f2 | tr -d [:space:] | cut -dk -f1)
  CACHEMEM=$((CACHEMEM * 1024))
  mqtt cachemem $CACHEMEM

  # network
  for i in ax200 ixgbe1 ixgbe0 smsc75usb ; do
    STATS=$(cat /proc/net/dev | grep $i: || true)
    if [ -n "$STATS" ] ; then
      RX=$(procnetdevrx $STATS)
      TX=$(procnetdevtx $STATS)
      mqtt nicrxb$i $RX
      mqtt nictxb$i $TX
    fi
  done
  DBM=$(iw dev ax200 link | grep signal | cut -d: -f2- | cut -dd -f1 | tr -d [:space:])
  if [ -n "$DBM" ] ; then
    mqtt signaldbm $DBM
  fi

  UPSEC=$(cut -d\  -f1 < /proc/uptime)
  mqtt uptimesec $UPSEC

  if [ $((ITER % 20)) = 0 ] ; then
    HARTSFIELD=$(weather-util -m 30308 | grep Temperature: | cut -d\  -f5)
    if [ -n "$HARTSFIELD" ] ; then
      mqtt hartsfield $HARTSFIELD
    fi
  fi

  # SATA disks
  DISKTEMPS=$(sensors -j | jq '.[]|select(.Adapter|test("SCSI adapter"))|.sata.temp1_input')
  DIDX=0
  for i in $DISKTEMPS ; do
    mqtt sata$DIDX $i
    DIDX=$((DIDX + 1))
  done

  # NVMe disks
  for i in /dev/nvme? ; do
    # text looks like: "temperature				: 50°C (323 Kelvin)"
    # in some error cases, a negative value is returned; elide these
    TEMP=$(nvme smart-log $i | grep ^temperature | cut -d\( -f1 | tr -d -c .[:digit:]-)
    S=$(echo $i | cut -d/ -f3)
    if [ "$TEMP" -ge 0 ] ; then
      mqtt "$S"temp $TEMP
    fi
  done

  # fs availability
  for i in / /home ; do
    AVAIL=$(df $i --output=avail | sed -e 1d)
    TOTAL=$(df $i --output=size | sed -e 1d)
    PCENT=`jq -n \(1-$AVAIL/$TOTAL\)*100`
    NAME="fs`basename $i | sed -e 's/\//root/'`"
    mqtt "$NAME" $PCENT
  done

  # these require root, ugh--set powercap-info suid root, or something similar =\.
  if UPSW=$(pwrstat -status | grep Load | cut -d\  -f2 || echo "") ; then
    if [ -n "$UPSW" ] ; then
      mqtt upswatts $UPSW
    else
      echo "couldn't read UPS power" >&2
    fi
  fi

  if UPSV=$(pwrstat -status | grep Utility\ Voltage | cut -d\  -f3 || echo "") ; then
    if [ -n "$UPSV" ] ; then
      mqtt Voltage $UPSV
    else
      echo "couldn't read UPS voltage" >&2
    fi
  fi

  # we get our delay from this turbostat invocation
  if TURBS=$(turbostat --quiet --Summary --hide idle,IRQ sleep 10 2>&1 | tail -n 1) ; then
    # we get Avg_MHz	Busy%	Bzy_MHz	TSC_MHz	IPC	CorWatt	PkgWatt
    BPCENT=$(echo $TURBS | cut -d\  -f2)
    if isnumber "$BPCENT" ; then
      mqtt cpubpcent $BPCENT
    fi
    PWATTS=$(echo $TURBS | cut -d\  -f7)
    if isnumber "$PWATTS" ; then
      mqtt pkgwatts $PWATTS
    fi
    AVGKHZ=$(echo $TURBS | cut -d\  -f1)
    BKHZ=$(echo $TURBS | cut -d\  -f3)
    # we can only do arithmetic ops if the operand is a number,
    # so test for that. this works in POSIX sh.
    if isnumber "$AVGKHZ" ; then
      if isnumber "$BKHZ" ; then
        AVGKHZ=$((AVGKHZ * 1000))
        BKHZ=$((BKHZ * 1000))
        mqtt cpuavgkhz $AVGKHZ
        mqtt cpubzykhz $BKHZ
      fi
    fi
  fi

  if DAYLIGHT=$(hueadm sensor 1 | grep daylight: | cut -d: -f2- | tr -d '[:space:]') ; then
    if [ "$DAYLIGHT" = "true" ] ; then
      DAYBOOL=1
    else
      DAYBOOL=0
    fi
    mqtt daylight $DAYBOOL
  fi

  mqttflush
  sleep 10
done
