#!/bin/sh

set -e

MQTT=$(which mosquitto_pub)
TOPIC=sensors/killermike

[ -n "$MQTTUSER" ] || { echo "export MQTT username as MQTTUSER" >&2 ; exit 1 ; }
[ -n "$MQTTPASS" ] || { echo "export MQTT password as MQTTPASS" >&2 ; exit 1 ; }
[ -n "$MQTTHOST" ] || { echo "export MQTT server as MQTTHOST" >&2 ; exit 1 ; }

# arguments: topic (key), message. swallow errors so we don't exit.
mqtt() {
  "$MQTT" -h "$MQTTHOST" -t "$TOPIC" -m "{\"$1\":$2}" -u "$MQTTUSER" -P "$MQTTPASS" || \
    { echo "error publishing $1 to mqtt" >&2 ; }
}

# prints bytes RX from a /proc/net/dev line provided as $*
procnetdevrx() {
  echo $* | sed -e 's/ *//' | cut -d\  -f2
}

# prints bytes TX from a /proc/net/dev line provided as $*
procnetdevtx() {
  echo $* | sed -e 's/ *//' | cut -d\  -f10
}

# this isn't going to change over our run
#mqtt kernelver "\"`uname -r`\""

CHIPID=nct6798-isa-0290

while true ; do
  # SMBus nct6798-isa-0290 SuperIO
  for i in `seq 1 7` ; do
    FAN=$(sensors -j | jq .\"$CHIPID\".\"fan${i}\".fan${i}_input) 2> /dev/null
    mqtt fan$i $FAN
  done

  # k10 temp sensors. TCtl is offset for a "consistent fan policy across
  # all AMD Ryzen processors", i.e. as input to a fan management scheme.
  TCTL=$(sensors -j | jq '."k10temp-pci-00c3".Tctl[]') 2> /dev/null
  mqtt tctl $TCTL

  # network
  for i in ax88772usb br0 ; do
    STATS=$(cat /proc/net/dev | grep $i:) # FIXME continue on error
    if [ -n "$STATS" ] ; then
      RX=$(procnetdevrx $STATS)
      TX=$(procnetdevtx $STATS)
      mqtt nicrxb$i $RX
      mqtt nictxb$i $TX
    fi
  done

  UPSEC=$(cut -d\  -f1 < /proc/uptime)
  mqtt uptimesec $UPSEC

  sleep 15
done
